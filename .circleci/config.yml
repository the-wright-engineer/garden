# CircleCI 2.1 configuration file
version: 2.1

orbs:
  win: circleci/windows@1.0.0

# Shared config to use between jobs
# These can be used to inject shared variables
# see https://blog.daemonl.com/2016/02/yaml.html
.references:
  # Configuration for our node jobs
  node-config: &node-config
    docker:
      - image: circleci/node:12
        environment:
          GARDEN_DISABLE_VERSION_CHECK: "true"
          GARDEN_DISABLE_ANALYTICS: "true"
          GARDEN_TASK_CONCURRENCY_LIMIT: "10"
    resource_class: large

  # Configuration for release jobs
  release-config: &release-config
    docker:
      # Image that contains ghr for publishing releases to Github
      - image: cibuilds/github:0.12.2

  # Attach's the current saved workspace
  attach-workspace: &attach-workspace
    attach_workspace:
          at: ./

  # Only run jobs on master
  only-master: &only-master
    filters:
      branches:
        only: master
      tags:
        ignore: /.*/

  # Only run on versioned tags
  only-tags: &only-tags
    filters:
      branches:
        ignore: /.*/
      tags:
        # Technically could be a better regex but for now just starting with v feels good enough
        only: /v.*/

  # Only run for PRs from core team
  only-internal-prs: &only-internal-prs
    filters:
      branches:
        # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
        ignore: /pull\/[0-9]+/

# Reuseable commands to execute in jobs
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version21
# and example https://github.com/mapbox/mapbox-gl-native/blob/master/circle.yml
commands:
  npm_install:
    description: |
      Installs npm packages for root, garden-service, and dashboard and loads and saves the caches as appropriate
    steps:
      - restore_cache:
          keys:
          - root-v4-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
          - garden-service-v4-{{ checksum "garden-service/package-lock.json" }}
      - restore_cache:
          keys:
          - dashboard-v4-{{ checksum "dashboard/package-lock.json" }}

      # only install root dependencies if node_modules wasn't cached
      - run: if [ ! -d "node_modules" ]; then npm ci; fi

      - run: npm run bootstrap

      - save_cache:
          paths: [node_modules]
          key: root-v4-{{ checksum "package-lock.json" }}
      - save_cache:
          paths: [garden-service/node_modules]
          key: garden-service-v4-{{ checksum "garden-service/package-lock.json" }}
      - save_cache:
          paths: [dashboard/node_modules]
          key: dashboard-v4-{{ checksum "dashboard/package-lock.json" }}

  install_kubectl:
    description: Install kubectl
    steps:
      - run:
          name: Install binary dependencies
          command: |
            mkdir -p $HOME/bin
            cd $HOME/bin
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl
            chmod +x kubectl
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV

  install_gcloud:
    description: Install the gcloud SDK
    steps:
      - run:
          name: Install gcloud
          command: |
            mkdir $HOME/gcloud
            curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz | tar xz -C $HOME/gcloud
            $HOME/gcloud/google-cloud-sdk/install.sh --quiet
            echo 'export PATH=$HOME/gcloud/google-cloud-sdk/bin:$PATH' >> $BASH_ENV

  configure_kubectl_context:
    description: Configure the kubectl context via gcloud so that we can access our remote cluster. Used for e2e testing.
    steps:
      - run:
          name: Configure kubectl context via gcloud and authenticate to Google Container Registry
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-key.json
            echo "export GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS" >> $BASH_ENV
            echo $GCLOUD_SERVICE_KEY > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_ID --zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet auth configure-docker

  build_service_dist:
    description: Package built code into executables and persist to garden-service/dist directory
    parameters:
      version:
        description: |
          The version tag used when building. Use to set the version string in the generated zip file names,
          e.g. when creating unstable releases. The script defaults to using the version from garden-service/package.json.
        type: string
        default: ""
    steps:
      - checkout
      - npm_install
      - run: sudo apt-get update && sudo apt-get -y install rsync
      - *attach-workspace
      - run:
          name: Run dist command with the appropriate argument
          command: npm run dist -- -- <<parameters.version>>
      - persist_to_workspace:
          root: ./
          paths:
            - garden-service/dist/
#
# Jobs section
#
jobs:
  build:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - npm_install
      - run:
          name: build
          command: |
            npm run build
      # Save the built output to be used for the docker image and for the release steps
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            # Save the built output for future
            - dashboard/build/
            - garden-service/build/
            - garden-service/static/
  build-dist:
    <<: *node-config
    steps:
      - build_service_dist
  build-dist-edge:
    <<: *node-config
    steps:
      - build_service_dist:
          version: edge
  lint:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get -y install parallel rsync
      - npm_install
      - *attach-workspace
      - run:
          name: Make sure generated docs are up-to-date
          command: npm run check-docs
      - run:
          name: lint
          command: npm run lint
  test-service:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - setup_remote_docker
      - npm_install
      - *attach-workspace
      - run:
          name: Configure git (needed for some tests)
          command: |
            git config --global user.name "Garden CI"
            git config --global user.email "admin@garden.io"
      - run:
          name: test
          command: |
            cd garden-service
            npm test
          environment:
            CHOKIDAR_USEPOLLING: "1"
  # (not used atm)
  e2e-all:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - npm_install
      - install_kubectl
      - install_gcloud
      - configure_kubectl_context
      - *attach-workspace
      - run:
          name: Run e2e tests
          # overriding CIRCLE_BUILD_NUM to avoid conflict with other tests
          command: CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-e2e ./garden-service/bin/garden test e2e-tests --root garden-service/test/e2e --logger-type basic
      - run:
          name: Cleanup
          command: CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-e2e kubectl delete --wait=false $(kubectl get ns -o name | grep testing-$CIRCLE_BUILD_NUM) || true
          when: always
  e2e-project:
    <<: *node-config
    parameters:
      project:
        description: The example project to test
        type: string
      environment:
        description: The project environment to use
        type: string
        default: testing
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - npm_install
      - install_kubectl
      - install_gcloud
      - configure_kubectl_context
      - *attach-workspace
      - run:
          name: Set environment
          command: export CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-e2e-<<parameters.project>>
      - run:
          name: Run e2e test
          command: |
            cd garden-service
            npm run e2e-project -- --project=<<parameters.project>> --showlog=true --env=<<parameters.environment>>
      - run:
          name: Cleanup
          command: kubectl delete --wait=false $(kubectl get ns -o name | grep testing-$CIRCLE_BUILD_NUM) || true
          when: always
  test-dashboard:
    <<: *node-config
    steps:
      - checkout
      - npm_install
      - *attach-workspace
      - run:
          name: Test dashboard
          command: |
            cd dashboard
            npm test
  build-docker:
    <<: *node-config
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - *attach-workspace
      - run:
          name: Build image and push to registry
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            TAG=gardendev/garden:${CIRCLE_SHA1}
            cd garden-service
            docker build -t ${TAG} -f Dockerfile .
            docker push ${TAG}
  build-docker-aws:
    <<: *node-config
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - *attach-workspace
      - run:
          name: Build image and push to registry
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            TAG=gardendev/garden-aws:${CIRCLE_SHA1}
            cd garden-service
            docker build -t ${TAG} --build-arg TAG=${CIRCLE_SHA1} -f aws.Dockerfile .
            docker push ${TAG}
  build-docker-gcloud:
    <<: *node-config
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - *attach-workspace
      - run:
          name: Build image and push to registry
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            TAG=gardendev/garden-gcloud:${CIRCLE_SHA1}
            cd garden-service
            docker build -t ${TAG} --build-arg TAG=${CIRCLE_SHA1} -f gcloud.Dockerfile .
            docker push ${TAG}
  build-docker-buster:
    <<: *node-config
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - *attach-workspace
      - run:
          name: Build image and push to registry
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            TAG=gardendev/garden:${CIRCLE_SHA1}-buster
            cd garden-service
            docker build -t ${TAG} -f buster.Dockerfile dist/linux-amd64
  test-docker-gcloud:
    docker:
      - image: gardendev/garden-gcloud:${CIRCLE_SHA1}
        environment:
          GARDEN_DISABLE_VERSION_CHECK: "true"
          GARDEN_DISABLE_ANALYTICS: "true"
          GARDEN_TASK_CONCURRENCY_LIMIT: "10"
    steps:
      # Need to checkout to run example project
      - checkout
      - configure_kubectl_context
      - *attach-workspace
      - run:
          name: Deploy demo-project with container
          # overriding CIRCLE_BUILD_NUM to avoid conflict with other tests
          command: CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-docker /garden/garden build --root examples/demo-project --env remote --logger-type basic
      - run:
          name: Cleanup
          command: CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-docker kubectl delete --wait=false $(kubectl get ns -o name | grep testing-$CIRCLE_BUILD_NUM) || true
          when: always
  release-service-docker:
    <<: *node-config
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      # This is to copy the pre-build build output from test-service (this should be a different step)
      - *attach-workspace
      # TODO: use garden publish here
      - deploy:
          name: Release docker images
          command: |
            # These values are inject from context docker
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # Switches between git tag and master for releases
            TAG=${CIRCLE_TAG:-master}
            # Push the container
            ./garden-service/bin/push-containers.sh $TAG
            # Push again with latest tag for non-pre-release tags
            if [[ "$TAG" == "$CIRCLE_TAG" ]] && [[ $VERSION != *"-"* ]]; then
              ./garden-service/bin/push-containers.sh latest
            fi
  release-service-dist:
    <<: *release-config
    steps:
      # Need to checkout to read version from garden-service/package.json
      - checkout
      - *attach-workspace
      - run:
          name: Create a release on GitHub. If the release is a pre-release we publish it right away, otherwise we make a draft.
          command: |
            VERSION="v$(cat garden-service/package.json | jq -r .version)"
            PRERELEASE=""
            DRAFT=-draft
            # If pre-release, we flag it as pre-release and not as a draft
            if [[ $VERSION == *"-"* ]]; then DRAFT=""; PRERELEASE=-prerelease; fi
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n ${VERSION} \
              -delete \
              ${PRERELEASE} \
              ${DRAFT} \
              ${VERSION} ./garden-service/dist
  release-service-dist-edge:
    <<: *release-config
    steps:
      - *attach-workspace
      - run:
          name: Publish a pre-release on GitHub with the tag 'edge'
          command: |
            VERSION=edge
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n ${VERSION} \
              -delete \
              -prerelease \
              ${VERSION} ./garden-service/dist
  test-dist:
    <<: *node-config
    steps:
      # Need to checkout to run example project
      - checkout
      - install_kubectl
      - install_gcloud
      - configure_kubectl_context
      - *attach-workspace
      - run: sudo apt-get update && sudo apt-get -y install rsync
      - run:
          name: Test that the binary works with the fancy logger enabled
          command: garden-service/dist/linux-amd64/garden options
      - run:
          name: Deploy demo-project with binary
          # overriding CIRCLE_BUILD_NUM to avoid conflict with other tests
          command: CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-dist garden-service/dist/linux-amd64/garden deploy --root examples/demo-project --env remote --logger-type basic
      - run:
          name: Cleanup
          command: CIRCLE_BUILD_NUM=$CIRCLE_BUILD_NUM-dist kubectl delete --wait=false $(kubectl get ns -o name | grep testing-$CIRCLE_BUILD_NUM) || true
          when: always
  test-minikube:
    machine:
      image: 'ubuntu-1604:201903-01'
      docker_layer_caching: true
    parameters:
      kubernetesVersion:
        description: The Kubernetes version to run
        type: string
    environment:
      K8S_VERSION: <<parameters.kubernetesVersion>>
      MINIKUBE_VERSION: v1.5.2
      GARDEN_LOG_LEVEL: debug
      GARDEN_LOGGER_TYPE: basic
    steps:
      - checkout
      - install_kubectl
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt install nfs-common
      - run:
          name: Update Node.js
          command: |
            # NVM is already installed, we just need to load it...
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            # ...export for subsequent runs...
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
            nvm install 12
            nvm alias default 12
            nvm use default
            # ...and finally symlink for when calling Garden with sudo below
            sudo ln -s "$NVM_DIR/versions/node/$(nvm version)/bin/node" "/usr/local/bin/node"
            sudo ln -s "$NVM_DIR/versions/node/$(nvm version)/bin/npm" "/usr/local/bin/npm"
      # Note: We can't use npm_install here because the cache conflicts
      - run: npm ci
      - run: npm run bootstrap
      - run: npm run build
      - run:
          name: Install Minikube Executable
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64
            chmod +x minikube
            sudo mv minikube /usr/local/bin
      - run:
          name: Start Minikube Cluster
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 4096 --kubernetes-version=$K8S_VERSION
            sudo chown -R circleci:circleci /home/circleci/.kube /home/circleci/.minikube /etc/kubernetes
      - run:
          name: Integ tests
          # Note: We skip tests that only work for remote environments
          command: cd garden-service && npm run integ-local -- -b
      - run:
          name: Deploy demo-project
          command: sudo -E ./garden-service/bin/garden deploy --root examples/demo-project --logger-type basic
      - run:
          name: Deploy openfaas
          command: sudo -E ./garden-service/bin/garden deploy --root examples/openfaas --logger-type basic
  test-windows:
    executor: win/vs2019
    steps:
      - checkout
      - *attach-workspace
      - run:
          name: Install Deps
          command: |
            choco upgrade -y rsync gcloudsdk kubernetes-cli
            refreshenv
      - run:
          name: Write gcloud credentials to file
          command: $env:GCLOUD_SERVICE_KEY | Set-Content key.json
      - run:
          name: Setup remote K8s
          command: |
            gcloud auth activate-service-account --key-file=key.json
            $env:GOOGLE_APPLICATION_CREDENTIALS = (Get-Location) + '\key.json'
            gcloud --quiet config set project $env:GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $env:GOOGLE_COMPUTE_ZONE
            gcloud --quiet container clusters get-credentials $env:GOOGLE_CLUSTER_ID --zone $env:GOOGLE_COMPUTE_ZONE
            gcloud --quiet auth configure-docker
      - run:
          name: Override build ID
          command: $env:CIRCLE_BUILD_NUM = "$env:CIRCLE_BUILD_NUM-win"
      - run:
          name: Build demo-project
          command: .\garden-service\dist\windows-amd64\garden.exe build --root .\examples\demo-project\ --logger-type basic --env remote
      - run:
          name: Deploy demo-project
          command: .\garden-service\dist\windows-amd64\garden.exe deploy --root .\examples\demo-project\ --logger-type basic --env remote
      - run:
          name: Cleanup
          command: (kubectl delete namespace --wait=false demo-project-testing-$env:CIRCLE_BUILD_NUM demo-project-testing-$env:CIRCLE_BUILD_NUM--metadata) -or $true
          when: always

workflows:
  version: 2
  test-minikube-1.16:
    jobs:
      - test-minikube:
          kubernetesVersion: "1.16.2"
  test-minikube-1.15:
    jobs:
      - test-minikube:
          kubernetesVersion: "1.15.6"
  test-minikube-1.14:
    jobs:
      - test-minikube:
          kubernetesVersion: "1.14.9"
  test-minikube-1.13:
    jobs:
      - test-minikube:
          kubernetesVersion: "1.13.12"
  test-minikube-1.12:
    jobs:
      - test-minikube:
          kubernetesVersion: "1.12.10"
  commit:
    jobs:
      ### ALL BRANCHES ###

      - build
      - build-dist:
          requires: [build]
      - lint:
          requires: [build]
      - build-docker:
          <<: *only-internal-prs
          context: docker
          requires: [build]
      - build-docker-aws:
          <<: *only-internal-prs
          context: docker
          requires: [build-docker]
      - build-docker-gcloud:
          <<: *only-internal-prs
          context: docker
          requires: [build-docker]
      - build-docker-buster:
          <<: *only-internal-prs
          context: docker
          requires: [build-dist]
      - test-docker-gcloud:
          <<: *only-internal-prs
          context: docker
          requires: [build-docker-gcloud]
      - test-service:
          requires: [build]
      - test-dist:
          # Don't attempt to run dist tests for external PRs (they won't have access to the required keys)
          <<: *only-internal-prs
          requires: [build-dist]
      - test-dashboard:
          requires: [build]
      - test-windows:
          # Don't attempt to run dist tests for external PRs (they won't have access to the required keys)
          <<: *only-internal-prs
          requires: [build-dist]

      - e2e-project:
          # Don't attempt to run e2e tests for external PRs (they won't have access to the required keys)
          <<: *only-internal-prs
          project: demo-project
          environment: remote
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: deployment-strategies
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: hot-reload
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: openfaas
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: project-variables
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: remote-sources
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: tasks
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: vote
          requires: [build]
      - e2e-project:
          <<: *only-internal-prs
          project: vote-helm
          requires: [build]

      ### MASTER ONLY ###

      - build-dist-edge:
          <<: *only-master
          requires: [build]
      - release-service-docker:
          <<: *only-master
          context: docker
          requires: [build-dist-edge]
      - release-service-dist-edge:
          <<: *only-master
          requires: [build-dist-edge]

  tags:
    jobs:
      - build:
          <<: *only-tags
      - build-dist:
          <<: *only-tags
          requires: [build]
      - release-service-docker:
          <<: *only-tags
          context: docker
          requires: [build-dist]
      - release-service-dist:
          <<: *only-tags
          requires: [build-dist]
